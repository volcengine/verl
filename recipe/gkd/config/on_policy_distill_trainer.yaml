# specify the default per-component configs
# defaults:

#   # <folder_name>@<field_name>.<field_name>: <yaml_file_name>
#   # actor_rollout_ref.actor: trainer/config/actor/megatron_actor.yaml
#   - actor@actor_rollout_ref.actor: megatron_actor
#   # load the reference default config, then apply the fields in the current yaml
#   - _self_

data:
  tokenizer: null
  train_files: /path/to/train.parquet
  val_files: null
  prompt_key: question
  reward_fn_key: data_source
  max_prompt_length: 512
  max_response_length: 512
  train_batch_size: 1024
  val_batch_size: null # DEPRECATED: Validation datasets are sent to inference engines as a whole batch, which will schedule the memory themselves
  return_raw_input_ids: False  # This should be set to true when the tokenizer between policy and rm differs
  return_raw_chat: False
  return_full_prompt: False
  shuffle: True
  filter_overlong_prompts: False # for large-scale dataset, filtering overlong prompts could be timeconsuming. You cat set the filter_overlong_prompts_workers to use multiprocessing to speed up.
  filter_overlong_prompts_workers: 1
  truncation: error
  trust_remote_code: False  # main_ppo will check this config to determine whether to use remote code for tokenizer
  custom_cls:
      path: null
      name: null
  sampler:
    class_path: null
    class_name: null
  dataloader_num_workers: 8
  return_multi_modal_inputs: True

actor_rollout_ref:
  hybrid_engine: False
  nccl_timeout: 600 # seconds, default is 10 minutes for torch, you can set it to a larger value if you have long-running operations like 32B or 72B model using megatron
  model:
    path: /path/to/MODEL
    custom_chat_template: null
    external_lib: null
    override_config:
      model_config: {"num_nextn_predict_layers": 0}
      moe_config:
        freeze_moe_router: False
    enable_gradient_checkpointing: False
    # gradient_checkpointing_kwargs:
    #   ## Activation Checkpointing
    #   activations_checkpoint_method: null # 'uniform', 'block'; not used with 'selective'
    #   # 'uniform' divides the total number of transformer layers and checkpoints the input activation of each chunk
    #   # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
    #   activations_checkpoint_granularity: null # 'selective' or 'full'
    #   # 'full' will checkpoint the entire transformer layer and 'selective' only checkpoints memory intensive part of attention
    #   activations_checkpoint_num_layers: null # not used with 'selective'
    trust_remote_code: False
  actor:
    # Whether to automatically adjust batch size at runtime
    strategy: megatron
    micro_batch_size: 2
    megatron:
      param_offload: False
      grad_offload: False
      optimizer_offload: False
      tensor_model_parallel_size: 1
      expert_model_parallel_size: 1
      expert_tensor_parallel_size: null
      pipeline_model_parallel_size: 1
      virtual_pipeline_model_parallel_size: null
      context_parallel_size: 1
      sequence_parallel: True
      use_distributed_optimizer: True
      use_dist_checkpointing: False
      dist_checkpointing_path: null
      seed: 42
      # additional transformer config like: num_layers_in_first(/last)_pipeline_stage
      override_transformer_config: {}
      use_mbridge: False
    optim:
      # Learning rate
      lr: 1e-6
      # Warmup steps ratio (used if lr_warmup_steps is negative)
      lr_warmup_steps_ratio: 0.0
      # Total training steps (must be overridden at runtime)
      total_training_steps: -1
      # Weight decay
      weight_decay: 0.01
      optimizer: adam
      clip_grad: 1.0
      # initial learning rate for warmup, default to 0.0
      lr_warmup_init: 0.0
      # Prioritized. None, 0 or Negative values mean delegating to lr_warmup_steps_ratio.
      lr_warmup_steps: null
      lr_decay_steps: null
      # select from constant/linear/cosine/inverse_square_root
      lr_decay_style: constant
      # minimum learning rate, default to 0.0
      min_lr: 0.0
      # select from constant/linear/cosine
      weight_decay_incr_style: constant
      # select from constant/exponential/cosine
      lr_wsd_decay_style: exponential
      lr_wsd_decay_steps: null
      # use checkpoint optimizer parameter scheduler
      use_checkpoint_opt_param_scheduler: False
    data_loader_seed: null
    load_weight: True
    checkpoint: 
      async_save: False # save checkpoint asynchronously
      # What to include in saved checkpoints
      # with 'hf_model' you can save whole model as hf format, now only use sharded model checkpoint to save space
      save_contents: ['model', 'optimizer', 'extra']
      load_contents: ${actor_rollout_ref.actor.checkpoint.save_contents}
    use_dynamic_bsz: False
    use_torch_compile: False
    shuffle: False
    # profile the actor model in `update_policy` 
    profiler:

      # Required when using verl.utils.omega_conf_to_dataclass to instantiate dataclass configs
      _target_: verl.utils.profiler.ProfilerConfig

      # profiler tool, default same as profiler.tool in global config
      # choices: nsys, npu, torch
      tool: ${oc.select:global_profiler.tool,null}

      # whether enable profile on Actor
      enable: False
      # Whether to profile all ranks.
      all_ranks: False

      # The ranks that will be profiled. [] or [0,1,...]
      ranks: []

      # profile results saving path
      save_path: ${oc.select:global_profiler.save_path,null}

      # specific tool config which only related to the role
      tool_config:

        # nsys tool config
        nsys:

          # True for each task has its own database, False for all tasks in one training step share one database.
          discrete: ${oc.select:global_profiler.global_tool_config.nsys.discrete}

        # npu config
        npu:

          # Required when using verl.utils.omega_conf_to_dataclass to instantiate dataclass configs
          _target_: verl.utils.profiler.config.NPUToolConfig

          # Contents to profile, can be empty
          # options: npu, cpu, memory, shapes, module, stack
          contents: []

          # Collection level, optional values: level_none, level0, level1, level2.
          level: "level1"

          # Whether to automatically parse the data.
          analysis: True

        # torch profiler config
        torch:

          # Required when using verl.utils.omega_conf_to_dataclass to instantiate dataclass configs
          _target_: verl.utils.profiler.config.TorchProfilerToolConfig

          # start profile mini-batch in training
          # NOTICE: different with global steps config which refers to iteration
          # This field only related with mini-batch
          step_start: 0

          # stop profile mini-batch in training
          step_end: null


  rollout:
    _target_: verl.workers.config.RolloutConfig
    name: vllm
    mode: sync # sync: LLM, async: AsyncLLM
    temperature: 1.0
    top_k: -1 # 0 for hf rollout, -1 for vllm rollout
    top_p: 1
    # max_batch_size: 8
    prompt_length: ${data.max_prompt_length}  # for xperf_gpt
    response_length: ${data.max_response_length}
    # for vllm rollout
    dtype: bfloat16 # should align with FSDP
    gpu_memory_utilization: 0.5
    ignore_eos: False
    enforce_eager: True
    free_cache_engine: True
    load_format: dummy_megatron
    tensor_model_parallel_size: 1
    max_num_batched_tokens: 8192
    max_model_len: null
    max_num_seqs: 1024
    disable_log_stats: True
    enable_chunked_prefill: False # could get higher throughput
    # for hf rollout
    do_sample: True
    layer_name_map:
      qkv_layer_name: qkv
      gate_proj_layer_name: gate_up
    # number of responses (i.e. num sample times)
    engine_kwargs: # inference engine parameters
      vllm:
        swap_space: null # null means "use the engine default value" (usually 4 GB), setting it to, e.g., 32 means 32 GB
        disable_mm_preprocessor_cache: False # whether to disable the preprocessor cache for multimodel models.
      sglang:
        attention_backend: null # null means use the engine default value, available options: flashinfer, triton, flashmla
    val_kwargs:
      # sampling parameters for validation
      top_k: -1 # 0 for hf rollout, -1 for vllm rollout
      top_p: 1.0
      temperature: 0
      n: 1
      do_sample: False # default eager for validation

    # Multi-turn interaction config for tools or chat.
    multi_turn:
      # set to True for multi-turn tool interaction tasks; should set rollout.name to sglang as well
      enable: False
      # null for no limit (default max_length // 3)
      max_assistant_turns: null
      # null for no tool
      tool_config_path: null
      # null for no limit (default max_length // 3)
      max_user_turns: null
      # max parallel call for tools in single turn
      max_parallel_calls: 1
      # max length of tool response
      max_tool_response_length: 256
      # truncate side of tool response: left, middle, right
      tool_response_truncate_side: middle
      # null for no interaction
      interaction_config_path: null
      # null for default callback
      completion_callback: null
      # - When set to True, the model's default chat template is used for multi-turn rollout, which typically matches production behavior.
      # - When set to False, the token ids recorded for training are used instead; unlike the default chat template, these always include the model's full output,
      #   which may contain additional content such as reasoning content. This maintains the consistency between training and rollout, but it will lead to longer prompts.
      use_inference_chat_template: False
      # Tokenization is performed turn by turn and the resulting token ids are concatenated to form the full conversation.
      # To ensure this matches the result of tokenizing the entire conversation at once, a sanity check is run at the end of each multi-turn rollout to compare the two sets of token ids.
      # Some models are known to produce different tokenization results when tokenizing turn by turn vs. all at once. aThis behavior has already been validated for them.
      # To reduce excessive warnings, you can turn off the sanity check for these models if you are using their default chat template:
      # Qwen/QwQ-32B, Qwen/Qwen3-xxB
      # - disable: disable tokenization sanity check
      # - strict: enable strict tokenization sanity check (default)
      # - ignore_strippable: ignore strippable tokens when checking tokenization sanity
      tokenization_sanity_check_mode: strict
      # Format of the multi-turn interaction. Options: hermes, llama3_json, ...
      format: hermes

    # [Experimental] agent loop based rollout configs
    agent:
      # Number of agent loop workers
      num_workers: 8
      custom_async_server:
        path: null
        name: null

    # support logging rollout prob for debugging purpose
    calculate_log_probs: False
    # # Nsight system profiler configs
    # profiler:
    #   # Required when using verl.utils.omega_conf_to_dataclass to instantiate dataclass configs in the entrypoint
    #   _target_: verl.utils.profiler.ProfilerConfig
    #   tool: ${oc.select:global_profiler.tool,null}
    #   all_ranks: False
    #   ranks: []

  teacher:
    server_ip: localhost
    server_port: 15555
    overlap_rollout: False
    n_server_workers: 1

trainer:
  balance_batch: True
  total_epochs: 30
  total_training_steps: null
  profile_steps: null # [1,2,5] or [] or null
  project_name: verl_examples
  experiment_name: gsm8k
  logger: ['console']
  log_val_generations: 0
  nnodes: 1
  n_gpus_per_node: 4
  save_freq: -1
  esi_redundant_time: 0
  
  # auto: find the last ckpt to resume. If can't find, start from scratch
  resume_mode: auto # or disable or resume_path if resume_from_path is set
  resume_from_path: null
  del_local_ckpt_after_load: False
  val_before_train: True
  test_freq: -1
  critic_warmup: 0
  default_hdfs_dir: null
  default_local_dir: checkpoints/${trainer.project_name}/${trainer.experiment_name}
  max_actor_ckpt_to_keep: null
  max_critic_ckpt_to_keep: null
  # The timeout for ray worker group to wait for the register center to be ready
  ray_wait_register_center_timeout: 300
  device: cuda

rollout:
  nnodes: 1
  n_gpus_per_node: 4

ray_init:
  num_cpus: null # `None` means using all CPUs, which might cause hang if limited in systems like SLURM. Please set to a number allowed then.
  timeline_json_file: null

# profiler configs
global_profiler:

  # Required when using verl.utils.omega_conf_to_dataclass to instantiate dataclass configs
  _target_: verl.utils.profiler.ProfilerConfig

  # Profiling tool: choose between nsys, npu, torch
  tool: null

  # profile steps
  steps: null

  # Whether to combine continuous steps into one database.
  ## If True, worker.profiler.discrete must be False, [1,2] in one, [5] in another.
  ## If False, [1] in one, [2] in another, [5] in another.
  profile_continuous_steps: False

  # Path to save profiling contents
  save_path: "outputs/profile"

  # Specific tool configs, can use +profiler.tool_config.[tool].xxx to config
  global_tool_config:
  
    # nsys config
    nsys:

      # Required when using verl.utils.omega_conf_to_dataclass to instantiate dataclass configs
      _target_: verl.utils.profiler.config.NsightToolConfig

      # True for each task has its own database, False for all tasks in one training step share one database.
      discrete: False

      # Whether to profile all ranks.
      all_ranks: False
      ranks: []
      # controller Nvidia Nsight Systems Options. Must set when profile_steps is not None.
      ## reference https://docs.nvidia.com/nsight-systems/UserGuide/index.html
      ## reference https://docs.ray.io/en/latest/ray-observability/user-guides/profiling.html
      controller_nsight_options:

        # Select the API(s) to be traced.
        trace: "cuda,nvtx,cublas,ucx"

        # Track the GPU memory usage by CUDA kernels. Must be string type "true" or "false".
        cuda-memory-usage: "true"

        # CUDA graphs will be traced as a whole
        cuda-graph-trace: "graph"

      # worker Nvidia Nsight Systems Options. Must set when profile_steps is not None.
      worker_nsight_options:

        # Select the API(s) to be traced.
        trace: "cuda,nvtx,cublas,ucx"

        # Track the GPU memory usage by CUDA kernels. Must be string type "true" or "false".
        cuda-memory-usage: "true"

        # CUDA graphs will be traced as a whole
        cuda-graph-trace: "graph"

        # Profiling only in a range of torch.cuda.profiler.start and stop. Do not change this config.
        capture-range: "cudaProfilerApi"

        # Specify the desired behavior when a capture range ends.
        # In verl we need the torch.cuda.profiler.start/stop pair to repeats n times.
        # valid values are "repeat-shutdown:n" or null.
        # For normal whole step profiling, n = len(profile_steps);
        # but for discrete profiling, n = len(profile_steps) * Number(subtasks).
        # Or you can just leave it null and the program will use n = len(profile_steps) * 6;
        capture-range-end: null

        # Send signal to the target application's process group. We let the program to exit by itself.
        kill: none
