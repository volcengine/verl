# Copyright 2025 Individual Contributor: linxxx3 (linxxx3@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any

from pydantic import BaseModel, ConfigDict


class TrajectoryItem(BaseModel):
    """content of one step in the trajectory"""

    messages: list[dict[str, Any]]
    """messages until now, including history and current turn"""

    new_messages: list[dict[str, Any]]
    """new messages of this turn"""

    prompt_ids: list[int]
    """original prompt token ids"""

    response_ids: list[int]
    """generated response token ids until now, including history and current turn"""

    response_mask: list[int]
    """mask for response_ids, 1 for tokens generated by this model, 0 for observation tokens"""

    extra_info: dict[str, Any] = {}


class Trajectory(BaseModel):
    """trajectory of one chat session"""

    model_config = ConfigDict(protected_namespaces=())  # supress warning
    trace_id: str
    model_name: str
    items: list[TrajectoryItem] = []

    def add_item(self, item: TrajectoryItem):
        self.items.append(item)

    def get_last_item(self) -> TrajectoryItem | None:
        if len(self.items) == 0:
            return None
        return self.items[-1]

    def to_dict(self) -> dict[str, Any]:
        return {
            "trace_id": self.trace_id,
            "items": [item.model_dump() for item in self.items],
        }
